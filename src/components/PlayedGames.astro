---
import * as steamApi from "../utils/steamApi.ts";
import GameCard from "../components//GameCard.astro";
import apps from "../../public/assets/app.json";
import orderGames from "../../public/assets/orderGames.json";
import { delay } from "../utils/utils";
import { ENABLE_REQUEST } from "astro:env/server";
import type { PlayedGame } from "../utils/steamApi.ts";

export interface MyPlayedGame extends PlayedGame {
  name: string;
  imgurl: string;
}

type SimpleGame = Pick<MyPlayedGame, "name" | "playtime_forever" | "imgurl">;

let playedGames: SimpleGame[] = [];

if (!ENABLE_REQUEST) {
  return;
}
const DELAY_MS = 1000;
const appidList = (await steamApi.playedGames()).filter((game) => game.playtime_forever > 200);;
let count = 1;
for (const game of appidList) {
  console.log(`请求 ${game.appid} 中  ${count++}/${appidList.length}`);
  await delay(DELAY_MS);
  const gameDetail = await steamApi.appdetails(game.appid);
  playedGames.push({
    playtime_forever: game.playtime_forever,
    name:
      apps.find(
        (app: { appid: number; name: string }) =>
          app.appid.toString() == game.appid
      )?.name || "",
    // imgurl: steamApi.imageUrl(game.appid.toString()),
    imgurl: gameDetail[game.appid]?.data?.header_image,
  });
}

orderGames.forEach((game) => `${import.meta.env.SITE}${import.meta.env.BASE_URL}${game.imgurl}`);

playedGames = playedGames
  .concat(orderGames)
  .sort((a, b) => b.playtime_forever - a.playtime_forever);
---

<div>
  {
    playedGames.map((game) => {
      const { name, playtime_forever, imgurl } = game;
      return (
        <GameCard name={name} playtime={playtime_forever} imgurl={imgurl} />
      );
    })
  }
</div>

<style></style>
