---
import type { MyPlayedGame } from "../utils/steamApi.ts";
import * as steamApi from "../utils/steamApi.ts";
import GameCard from "../components//GameCard.astro";
import apps from "../../public/assets/app.json";
import { delay } from "../utils/utils";

let playedGames: MyPlayedGame[] = [];
const ENABLE_REQUEST = import.meta.env.ENABLE_REQUEST || "false"; //频繁请求可能导致被api封禁，仅在调试完毕后开启

if (ENABLE_REQUEST != "true") {
  return;
}
const DELAY_MS = 1000;
const appidList = await steamApi.playedGames();
for (const game of appidList) {
  await delay(DELAY_MS);
  playedGames.push({
    ...game,
    name:
      apps.find(
        (app: { appid: number; name: string }) =>
          app.appid.toString() == game.appid
      )?.name || "",
    imgurl: steamApi.imageUrl(game.appid.toString()),
  });
}

//TODO
// const otherGames = [{
//   name:'Escape from Tarkov',
//   imgurl: 'https://cdn.cloudflare.steamstatic.com/steam/apps/255710/header.jpg',
// }]
// playedGames.push()

playedGames = playedGames.filter((game) => game.playtime_forever > 1000);
---

<div>
  {
    playedGames.map((game) => {
      const { appid, name, playtime_forever, imgurl } = game;
      return (
        <GameCard
          appid={appid}
          name={name}
          playtime={playtime_forever}
          imgurl={imgurl}
        />
      );
    })
  }
</div>

<style></style>
